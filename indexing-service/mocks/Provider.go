// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	big "math/big"

	mock "github.com/stretchr/testify/mock"

	provider "github.com/pokt-foundation/pocket-go/provider"

	testing "testing"

	time "time"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

// GetAccountTransactions provides a mock function with given fields: address, options
func (_m *Provider) GetAccountTransactions(address string, options *provider.GetAccountTransactionsOptions) (*provider.GetAccountTransactionsOutput, error) {
	ret := _m.Called(address, options)

	var r0 *provider.GetAccountTransactionsOutput
	if rf, ok := ret.Get(0).(func(string, *provider.GetAccountTransactionsOptions) *provider.GetAccountTransactionsOutput); ok {
		r0 = rf(address, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provider.GetAccountTransactionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *provider.GetAccountTransactionsOptions) error); ok {
		r1 = rf(address, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBalance provides a mock function with given fields: address, options
func (_m *Provider) GetBalance(address string, options *provider.GetBalanceOptions) (*big.Int, error) {
	ret := _m.Called(address, options)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(string, *provider.GetBalanceOptions) *big.Int); ok {
		r0 = rf(address, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *provider.GetBalanceOptions) error); ok {
		r1 = rf(address, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlock provides a mock function with given fields: blockNumber
func (_m *Provider) GetBlock(blockNumber int) (*provider.GetBlockOutput, error) {
	ret := _m.Called(blockNumber)

	var r0 *provider.GetBlockOutput
	if rf, ok := ret.Get(0).(func(int) *provider.GetBlockOutput); ok {
		r0 = rf(blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provider.GetBlockOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockHeight provides a mock function with given fields:
func (_m *Provider) GetBlockHeight() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockTransactions provides a mock function with given fields: blockHeight, options
func (_m *Provider) GetBlockTransactions(blockHeight int, options *provider.GetBlockTransactionsOptions) (*provider.GetBlockTransactionsOutput, error) {
	ret := _m.Called(blockHeight, options)

	var r0 *provider.GetBlockTransactionsOutput
	if rf, ok := ret.Get(0).(func(int, *provider.GetBlockTransactionsOptions) *provider.GetBlockTransactionsOutput); ok {
		r0 = rf(blockHeight, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provider.GetBlockTransactionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *provider.GetBlockTransactionsOptions) error); ok {
		r1 = rf(blockHeight, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetType provides a mock function with given fields: address, options
func (_m *Provider) GetType(address string, options *provider.GetTypeOptions) (provider.AddressType, error) {
	ret := _m.Called(address, options)

	var r0 provider.AddressType
	if rf, ok := ret.Get(0).(func(string, *provider.GetTypeOptions) provider.AddressType); ok {
		r0 = rf(address, options)
	} else {
		r0 = ret.Get(0).(provider.AddressType)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *provider.GetTypeOptions) error); ok {
		r1 = rf(address, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetRequestConfigToDefault provides a mock function with given fields:
func (_m *Provider) ResetRequestConfigToDefault() {
	_m.Called()
}

// UpdateRequestConfig provides a mock function with given fields: retries, timeout
func (_m *Provider) UpdateRequestConfig(retries int, timeout time.Duration) {
	_m.Called(retries, timeout)
}

// NewProvider creates a new instance of Provider. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewProvider(t testing.TB) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
